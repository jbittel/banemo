#!/usr/bin/env bash
#
# Pure bash implementation of the munemo algorithm
# from https://github.com/jmettraux/munemo
#
set -o errexit
set -o nounset

SYLS=(
     ba  bi  bu  be  bo
    cha chi chu che cho
     da  di  du  de  do
     fa  fi  fu  fe  fo
     ga  gi  gu  ge  go
     ha  hi  hu  he  ho
     ja  ji  ju  je  jo
     ka  ki  ku  ke  ko
     la  li  lu  le  lo
     ma  mi  mu  me  mo
     na  ni  nu  ne  no
     pa  pi  pu  pe  po
     ra  ri  ru  re  ro
     sa  si  su  se  so
    sha shi shu she sho
     ta  ti  tu  te  to
    tsa tsi tsu tse tso
     wa  wi  wu  we  wo
     ya  yi  yu  ye  yo
     za  zi  zu  ze  zo
)

SYL_COUNT=${#SYLS[@]}

NEG="xa"

_tos() {
	local i="$1"

	local mod=$((i % $SYL_COUNT))
	local rst=$((i / $SYL_COUNT))

	if (( rst > 0 )); then
		_tos $rst
	fi

	string+=${SYLS[$mod]}
}

# Converts integer numbers to strings
to_s() {
    local i="$1"
    local string=""

    if (( i < 0 )); then
    	string+=$NEG
    	i=${i#-}
    fi

    _tos $i

    echo $string
}

_contains() {
    local value=$1

    for i in "${!SYLS[@]}"; do
        if [ "${SYLS[$i]}" = "${value}" ]; then
            echo "${i}";
        fi
    done
}

# Converts strings to integer numbers
to_i() {
    local s="$1"
    local sign=1
    local result=0

    if [ "${s:0:2}" = "$NEG" ]; then
        sign=-1
        s=${s#$NEG}
    fi

    while [ "${#s}" -gt 0 ]; do
        i2=$(_contains ${s:0:2})
        i3=$(_contains ${s:0:3})
        i=${i2:-$i3}
        result=$(( ${SYL_COUNT} * result + i ))
        s=${s#${SYLS[$i]}}
    done

    echo $(( $sign * $result ))
}

# Print usage information and exit
usage() {
    local scriptname="${0##*/}"
cat <<- EOF
usage: $scriptname (-i|-s) (integer|string)
    -i <integer>
    -s <string>
EOF
exit 0
}

main() {
    local integer=""
    local string=""

    local OPTIND=0
    while getopts "i:s:h" opt; do
        case $opt in
            i) integer="$OPTARG";;
            s) string="$OPTARG";;
            h) usage;;
            *) echo "error: unknown option $opt" >&2; exit 1;;
        esac
    done

    if (( OPTIND == 1 )); then
        usage
    fi

    shift $(( OPTIND - 1 ))

    if [[ ! -z "$integer" ]]; then
        to_s "$integer"
    elif [[ ! -z "$string" ]]; then
        to_i "$string"
    fi
}

main "${@}"
